hydra:
  run:
    dir: .
  sweep:
    dir: .
    subdir: .
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: true
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: true
  env: {}
  searchpath: []
  callbacks: {}
  output_subdir: null
  overrides:
    hydra: []
    task:
    - system.dtype=64
    - system.device=-2
    - launcher=besteffort
    - launcher.app=/scratch/clear/marbel/anaconda3/bin/python
    - launcher.gpumem=2
    - launcher.hours=1
    - cluster.name=
    - logs.log_name=debug
    - training=quadratic_toy
    - training.resume=True
    - training.loader.b_size=1
    - selection=BGS
    - selection.optimizer.lr=0.9
    - selection.correction=True
    - training.upper.scheduler.use_scheduler=False
    - training.upper.optimizer.lr=1.
    - selection.warm_start_iter=1
    - selection.unrolled_iter=0
    - training.total_epoch=2000
    - selection.linear_solver.name=core.linear_solvers.GD
    - selection.linear_solver.n_iter=1
    - selection.linear_solver.lr=0.9
    - training.upper.objective.cond=10
    - training.lower.objective.cond=10
    - training.lower.model.dim=1000
    - training.upper.model.dim=2000
    - selection.optimizer.momentum=0.
    - selection.scheduler.use_scheduler=False
    - +training.lower.objective.with_sin=True
  job:
    name: run
    override_dirname: +training.lower.objective.with_sin=True,cluster.name=,launcher.app=/scratch/clear/marbel/anaconda3/bin/python,launcher.gpumem=2,launcher.hours=1,launcher=besteffort,logs.log_name=debug,selection.correction=True,selection.linear_solver.lr=0.9,selection.linear_solver.n_iter=1,selection.linear_solver.name=core.linear_solvers.GD,selection.optimizer.lr=0.9,selection.optimizer.momentum=0.,selection.scheduler.use_scheduler=False,selection.unrolled_iter=0,selection.warm_start_iter=1,selection=BGS,system.device=-2,system.dtype=64,training.loader.b_size=1,training.lower.model.dim=1000,training.lower.objective.cond=10,training.resume=True,training.total_epoch=2000,training.upper.model.dim=2000,training.upper.objective.cond=10,training.upper.optimizer.lr=1.,training.upper.scheduler.use_scheduler=False,training=quadratic_toy
    id: ???
    num: ???
    config_name: config.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.1.1
    cwd: /home/marbel/Documents/projects/BGS-opt
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/marbel/Documents/projects/BGS-opt/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    choices:
      selection: BGS
      training: quadratic_toy
      logs: default
      launcher: besteffort
      cluster: OAR
      system: default
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
system:
  device: -2
  seed:
    torch: 0
    numpy: 0
  dtype: 64
  num_workers: 1
  slurm_id: ''
  dataparallel: false
  experimentalist: true
  hostname: ''
  process_id: -1
  date: ''
  time: ''
cluster:
  user: ${env:USER}
  engine: OAR
  shell:
    bin_path: /bin/bash
    config_path: ~/.bashrc
  directive: '#OAR'
  cleanup: source gpu_setVisibleDevices.sh
  cmd: oarsub -S
  launchers: ${launcher.name}
  conda_env: ${env:CONDA_DEFAULT_ENV}
  name: ''
launcher:
  name: besteffort
  filename: ${launcher.name}.sh
  hours: 1
  gpumodel: null
  gpumem: 2
  besteffort: true
  idempotent: true
  cmd: run.py
  app: /scratch/clear/marbel/anaconda3/bin/python
  nodes: 1
  cpus: 1
logs:
  log_dir: data/outputs
  log_name: debug
  log_to_file: false
  log_id: null
training:
  trainer_name: examples.toy.trainer.Trainer
  total_epoch: 2000
  resume: true
  metrics:
    disp_freq: 10
    max_upper_iter: 1
    max_lower_iter: 1
    epoch_eval: true
    log_artefacts_freq: 200
    log_artifacts: true
    log_lower_cond: false
    freq_lower_cond: 5000
    eval_test: true
    name: value
  loader:
    b_size: 1
    eval_b_size: 1
  upper:
    objective:
      name: examples.toy.models.QuadyLinx
      cond: 10
    model:
      name: examples.toy.models.Identity
      dim: 2000
      path: ''
    optimizer:
      name: torch.optim.SGD
      lr: 1.0
      weight_decay: 0.0
    scheduler:
      name: torch.optim.lr_scheduler.ReduceLROnPlateau
      patience: 1
      use_scheduler: false
    clip: false
    max_norm: 1.0
  lower:
    objective:
      name: examples.toy.models.QuadyLinx
      cond: 10
      with_sin: true
    model:
      name: examples.toy.models.Identity
      dim: 1000
selection:
  name: BGS
  warm_start_iter: 1
  unrolled_iter: 0
  correction: true
  add_correction: true
  compute_latest_correction: true
  dual_var_warm_start: true
  optimizer:
    name: TorchOpt.sgd
    momentum: 0.0
    lr: 0.9
  scheduler:
    name: torch.optim.lr_scheduler.CosineAnnealingLR
    T_max: ${training.total_epoch}
    use_scheduler: false
  linear_solver:
    name: core.linear_solvers.GD
    lr: 0.9
    n_iter: 1
  linear_op:
    name: core.selection.HessianOp
    stochastic: true
    use_new_input: true
    compute_new_grad: true
