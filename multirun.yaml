hydra:
  run:
    dir: .
  sweep:
    dir: .
    subdir: .
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: true
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: true
  env: {}
  searchpath: []
  callbacks: {}
  output_subdir: null
  overrides:
    hydra: []
    task:
    - system.dtype=32
    - system.device=-1
    - launcher=besteffort
    - launcher.app=/scratch/clear/marbel/anaconda3/bin/python
    - launcher.gpumem=14
    - launcher.hours=17
    - cluster.name=
    - logs.log_name=multitask_cifar100_new
    - training=multitask_cifar100
    - training.resume=True
    - training.trainer_name=trainers.multitask.trainer_multitask_new_interface.Trainer
    - training.lower.selection.correction=True
    - training.lower.selection.linear_solver.residual_op.name=core.selection.NormalResidual
    - training.lower.selection.optimizer.lr=0.01,0.001
    - training.upper.clip=True
  job:
    name: launch_jobs
    override_dirname: cluster.name=,launcher.app=/scratch/clear/marbel/anaconda3/bin/python,launcher.gpumem=14,launcher.hours=17,launcher=besteffort,logs.log_name=multitask_cifar100_new,system.device=-1,system.dtype=32,training.lower.selection.correction=True,training.lower.selection.linear_solver.residual_op.name=core.selection.NormalResidual,training.lower.selection.optimizer.lr=0.01,0.001,training.resume=True,training.trainer_name=trainers.multitask.trainer_multitask_new_interface.Trainer,training.upper.clip=True,training=multitask_cifar100
    id: ???
    num: ???
    config_name: config.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.1.1
    cwd: /home/marbel/Documents/projects/BGS-opt
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/marbel/Documents/projects/BGS-opt/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    choices:
      training: multitask_cifar100
      logs: default
      launcher: besteffort
      cluster: OAR
      system: default
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
system:
  device: -1
  seed:
    torch: 0
    numpy: 0
  dtype: 32
  num_workers: 1
  slurm_id: ''
  dataparallel: false
  experimentalist: true
  hostname: ''
  process_id: -1
  date: ''
  time: ''
cluster:
  user: ${env:USER}
  engine: OAR
  shell:
    bin_path: /bin/bash
    config_path: ~/.bashrc
  directive: '#OAR'
  cleanup: source gpu_setVisibleDevices.sh
  cmd: oarsub -S
  launchers: ${launcher.name}
  conda_env: ${env:CONDA_DEFAULT_ENV}
  name: ''
launcher:
  name: besteffort
  filename: ${launcher.name}.sh
  hours: 17
  gpumodel: null
  gpumem: 14
  besteffort: true
  idempotent: true
  cmd: run.py
  app: /scratch/clear/marbel/anaconda3/bin/python
  nodes: 1
  cpus: 1
logs:
  log_dir: data/outputs
  log_name: multitask_cifar100_new
  log_to_file: false
  log_id: null
training:
  trainer_name: trainers.multitask.trainer_multitask_new_interface.Trainer
  total_epoch: 200
  resume: true
  metrics:
    disp_freq: 10
    max_upper_iter: 1
    max_lower_iter: 1
    epoch_eval: true
    log_artefacts_freq: 200
    log_artifacts: true
    log_lower_cond: false
    freq_lower_cond: 5000
    eval_test: true
    name: multivalue
  loader:
    loader: trainers.multitask.loaders.MutiTaskLoader
    name: datasets.CIFAR100MTL
    b_size: 32
    eval_b_size: 32
    num_tasks: 20
    subset_id: 0
    data_path: data/datasets
  upper:
    objective:
      name: trainers.multitask.models.MutiTaskLoss
      weighted: false
      apply_reg: false
      num_tasks: ${training.loader.num_tasks}
    model:
      name: trainers.multitask.models.Identity
      dim: ${training.loader.num_tasks}
      init: 0.1
      path: ''
    optimizer:
      name: torch.optim.Adam
      lr: 0.0003
    scheduler:
      use_scheduler: false
    clip: true
    max_norm: 1.0
  lower:
    objective:
      name: trainers.multitask.models.MutiTaskLoss
      weighted: true
      apply_reg: true
      reg: 0.0005
      num_tasks: ${training.loader.num_tasks}
    model:
      name: trainers.multitask.models.models.VectMTLVGG16
      num_tasks: ${training.loader.num_tasks}
    selection:
      warm_start_iter: 1
      unrolled_iter: 0
      correction: true
      dual_var_warm_start: true
      optimizer:
        name: TorchOpt.sgd
        momentum: 0.9
        lr: 0.1
      scheduler:
        name: torch.optim.lr_scheduler.CosineAnnealingLR
        T_max: ${training.total_epoch}
        use_scheduler: true
      linear_solver:
        algorithm:
          name: core.linear_solvers.SGD
          lr: 0.001
          n_iter: 1
        residual_op:
          name: core.selection.NormalResidual
        stochastic: true
